#!/usr/bin/env node
(()=>{"use strict";var e={n:t=>{var o=t&&t.__esModule?()=>t.default:()=>t;return e.d(o,{a:o}),o},d:(t,o)=>{for(var n in o)e.o(o,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:o[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};const t=require("commander"),o=require("fs-extra");var n=e.n(o);const s=require("chalk"),r=require("ora"),a=(require("node:path"),require("child_process")),c=(e=!1)=>e?"import Koa, { Context, Next } from 'koa';\nconst App = new Koa();\n\nApp.use((ctx:Context, next:Next) => {\n  ctx.body = \"nail api\";\n});\n\nApp.use(async (ctx:Context, next:Next) => {\n  const started:Date = Date.now();\n  await next();\n  const ellapsed:number = (Date.now() - started) + 'ms';\n  console.log('Response time is:', ellapsed);\n});\n\nconst port = '9094';\nApp.listen(port);":"const Koa = require('koa');\nconst App = new Koa();\n  \nApp.use(async (ctx, next) => {\n  const started = Date.now();\n  await next();\n  const ellapsed = (Date.now() - started) + 'ms';\n  console.log('Response time is:', ellapsed);\n});\n\napp.use(async (ctx, next) => {\n  try {\n    await next()\n  } catch (err) {\n    ctx.status = 400\n    ctx.body = `Uh-oh: ${errContent}`;\n    console.log('Error handler:', err.message)\n  }\n});\n  \nconst Router = require('./router');\nApp.use(Router.routes()).use(Router.allowedMethods());\n  \nconst port = '9094';\nApp.listen(port);",p=(e=!1)=>e?"import Koa, { Context, Next } from 'koa';\nconst App = new Koa();\n\nApp.use((ctx:Context, next:Next) => {\n  ctx.body = \"nail api\";\n});\n\nApp.use(async (ctx:Context, next:Next) => {\n  const started:Date = Date.now();\n  await next();\n  const ellapsed:number = (Date.now() - started) + 'ms';\n  console.log('Response time is:', ellapsed);\n});\n\nconst port = '9094';\nApp.listen(port);":"const KoaRouter = require('koa-router');\nconst Router = new KoaRouter();\n  \nRouter.get('/', (ctx, next) => {\n  ctx.body = \"nail get api\";\n})\n  \nRouter.post('/', (ctx, next) => {\n  ctx.body = \"nail post api\";\n})\n  \nmodule.exports = Router;",i=require("inquirer");var l=e.n(i);const d=new t.Command,m=process.cwd();d.name("jscli-with-commander").description("CLI to run calculations.").version("0.0.1"),d.command("new <projectName>").description("初始化项目").action((async e=>{const t=`${m}/${e}`;try{n().pathExistsSync(t)&&((await l().prompt([{type:"confirm",name:"newProject",message:"是否重建项目",default:!0}])).newProject?await n().remove(t):process.exit());const i=await l().prompt([{type:"list",name:"frame",message:"请选择框架",choices:["koa","express"],default:1}]),d=await n().readJsonSync(__dirname+`/../template/${i.frame}Package.json`);if(await n().remove(__dirname+`/../template/${i.frame}`),await n().ensureDir(__dirname+`/../template/${i.frame}`),"typescript"===(await l().prompt({type:"list",name:"isTs",message:"是否安装typescript",choices:["javascript","typescript"],default:1})).isTs){d.dependencies.typescript="^5.5.4",d.devDependencies["@types/koa"]="^2.15.0",d.devDependencies["@types/node"]="^22.2.0",d.devDependencies["@types/koa-router"]="^7.4.8";const e=c(!0),t=p(!0);await n().writeJsonSync(__dirname+`/../template/${i.frame}/package.json`,d,{spaces:2,EOL:"\r\n"}),await n().writeFile(__dirname+`/../template/${i.frame}/app.ts`,e,{spaces:2,EOL:"\r\n"}),await n().writeFile(__dirname+`/../template/${i.frame}/router.ts`,t,{spaces:2,EOL:"\r\n"})}else{await n().writeJsonSync(__dirname+`/../template/${i.frame}/package.json`,d,{spaces:2,EOL:"\r\n"});const e=c(),t=p();await n().writeFile(__dirname+`/../template/${i.frame}/app.js`,e,{spaces:2,EOL:"\r\n"}),await n().writeFile(__dirname+`/../template/${i.frame}/router.js`,t,{spaces:2,EOL:"\r\n"})}const m=r(s.green("初始化项目中.......")).start();await n().copy(__dirname+`/../template/${i.frame}`,t),await(o=t,new Promise(((e,t)=>{const n="win32"===process.platform,s=(0,a.spawn)(n?"npm.cmd":"npm",["install"],{cwd:o,shell:"win32"===process.platform,stdio:["pipe"]});s.stdout.on("data",(t=>{e(!0)})),s.stderr.on("data",(e=>{t(!0)})),s.on("error",(e=>{t(!0)}))}))),m.succeed(s.green("创建成功")),console.log(s.blue(`You can start by running:\n    ${s.green(`cd ${e}`)}\n    ${s.green("npm run dev for development")}\n    ${s.green("npm run build for production")}`)),process.exit()}catch(e){console.log(e)}var o})),d.command("dev").option("-js, --javascript","select javascript").option("-ts, --typescript","select typescript").description("开发模式").action((async e=>{try{e?.javascript&&await(t=m,new Promise(((e,o)=>{const n=(0,a.spawn)("npx",["nodemon","app.js"],{cwd:t,shell:"win32"===process.platform,stdio:["pipe"]});let s="";n.stdout.on("data",(t=>{s+=t.toString(),console.log(`stdout: ${s}`),e(!0)})),n.stderr.on("data",(e=>{console.log(`stderr: ${e}`),o(!0)})),n.on("error",(e=>{console.log(`error: ${e.message}`),o(!0)})),n.on("close",(e=>{console.log(`child process exited with code ${e}`)}))}))),e?.typescript&&await(e=>new Promise(((t,o)=>{const n=(0,a.spawn)("npx",["ts-node-dev","--respawn","app.ts"],{cwd:e,shell:"win32"===process.platform,stdio:["pipe"]});let s="";n.stdout.on("data",(e=>{s+=e.toString(),console.log(`stdout: ${s}`),t(!0)})),n.stderr.on("data",(e=>{console.log(`stderr: ${e}`),o(!0)})),n.on("error",(e=>{console.log(`error: ${e.message}`),o(!0)})),n.on("close",(e=>{console.log(`child process exited with code ${e}`)}))})))(m)}catch(e){console.log(e)}var t})),d.command("start").option("-js, --javascript","select javascript").option("-ts, --typescript","select typescript").description("生产模式").action((async e=>{try{if(e?.javascript&&await(t=m,new Promise(((e,o)=>{const n=(0,a.spawn)("node",["app.js"],{cwd:t,shell:"win32"===process.platform,stdio:["pipe"]});n.stdout.on("data",(t=>{console.log(`stdout: ${t}`),e(!0)})),n.stderr.on("data",(e=>{console.log(`stderr: ${e}`),o(!0)})),n.on("error",(e=>{console.log(`error: ${e.message}`),o(!0)})),n.on("close",(e=>{console.log(`child process exited with code ${e}`)}))}))),e?.typescript){try{await(e=>new Promise(((t,o)=>{const n=(0,a.spawn)("npx",["tsc"],{cwd:e,shell:"win32"===process.platform,stdio:["pipe"]});let s="";n.stdout.on("data",(e=>{s+=e.toString(),console.log(`stdout: ${s}`),t(!0)})),n.stderr.on("data",(e=>{console.log(`stderr: ${e}`),o(!0)})),n.on("error",(e=>{console.log(`error: ${e.message}`),o(!0)})),n.on("close",(e=>{console.log(`spawnCli child process exited with code ${e}`),o(!0)}))})))(m)}catch(e){}try{await(e=>new Promise(((t,o)=>{const n=(0,a.spawn)("node",["dist/app.js"],{cwd:e,shell:"win32"===process.platform,stdio:["pipe"]});let s="";n.stdout.on("data",(e=>{s+=e.toString(),console.log(`stdout: ${s}`),t(!0)})),n.stderr.on("data",(e=>{console.log(`stderr: ${e}`),o(!0)})),n.on("error",(e=>{console.log(`error: ${e.message}`),o(!0)})),n.on("close",(e=>{console.log(`nodeCli child process exited with code ${e}`)}))})))(m)}catch(e){}}}catch(e){console.log(e)}var t})),d.command("controller <controllerName>").description("创建模版").action((async e=>{if(!e)return!1;const t=`export default ${e}Controller {}`;await n().writeFile(`${m}/${e}.js`,t,{spaces:2,EOL:"\r\n"})})),d.parse(process.argv)})();